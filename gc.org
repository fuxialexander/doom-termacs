* What's this?
:PROPERTIES:
:ID:       789024F0-7375-4B88-8A88-696542663513
:END:
This is my config garbage collection. Just in case someday I find those useful.
* LSP hack
:PROPERTIES:
:ID:       573421AF-24AB-45AE-91E9-155981552B70
:END:
#+BEGIN_SRC emacs-lisp
(setq-default lsp-ui-doc-frame-parameters
            '((left . -1)
                (top . -1)
                (no-accept-focus . t)
                (min-width . 0)
                (width . 0)
                (min-height . 0)
                (height . 0)
                (internal-border-width . 5)
                (vertical-scroll-bars)
                (horizontal-scroll-bars)
                (left-fringe . 0)
                (right-fringe . 0)
                (menu-bar-lines . 0)
                (tool-bar-lines . 0)
                (line-spacing . 0.1)
                (unsplittable . t)
                (undecorated . t)
                (minibuffer . nil)
                (visibility . nil)
                (mouse-wheel-frame . nil)
                (no-other-frame . t)
                (cursor-type)
                (no-special-glyphs . t)))
(defun lsp-ui-doc--make-frame ()
"Create the child frame and return it."
(lsp-ui-doc--delete-frame)
(let* ((after-make-frame-functions nil)
        (before-make-frame-hook nil)
        (name-buffer (lsp-ui-doc--make-buffer-name))
        (buffer (get-buffer name-buffer))
        (params (append lsp-ui-doc-frame-parameters
                        `(
                            ;; (default-minibuffer-frame . ,(selected-frame))
                            ;; (minibuffer . ,(minibuffer-window))
                            (background-color . ,(doom-blend 'blue 'bg 0.1)))))
        (window (display-buffer-in-child-frame
                buffer
                `((child-frame-parameters . ,params))))
        (frame (window-frame window)))
    (set-frame-parameter nil 'lsp-ui-doc-buffer buffer)
    (set-window-dedicated-p window t)
    ;; (redirect-frame-focus frame (frame-parent frame))
    (set-face-background 'internal-border lsp-ui-doc-border frame)
    (run-hook-with-args 'lsp-ui-doc-frame-hook frame window)
    frame))

(defun my-fontify-mode (text mode)
(with-temp-buffer
    (erase-buffer)
    (insert text)
    (delay-mode-hooks (funcall mode))
    (font-lock-default-function mode)
    (goto-char (point-min))
    (font-lock-default-fontify-region (point-at-bol) (point-at-eol) nil)
    (forward-line 1)
    (while (not (eq (line-number-at-pos) (line-number-at-pos (point-max))))
    (if (re-search-forward "[][@#$%^&*|+=\\<>{}]" (point-at-eol) t)
        (font-lock-default-fontify-region (point-at-bol) (point-at-eol) nil))

    (forward-line 1))
    (buffer-string)))
(defun my-fontify-using-faces (text)
(let ((pos 0))
    (while (setq next (next-single-property-change pos 'face text))
    (put-text-property pos next 'font-lock-face (get-text-property pos 'face text) text)
    (setq pos next))
    (add-text-properties 0  (length text) '(fontified t) text)
    text))
(defun lsp-ui-doc--render-buffer (string symbol)
"set the buffer with string.
symbol."
(let ((pmode major-mode))
    (lsp-ui-doc--with-buffer
    (erase-buffer)
    (insert (my-fontify-using-faces (my-fontify-mode string pmode)))
    (lsp-ui-doc--make-clickable-link)
    (hl-line-mode -1)
    (setq-local face-remapping-alist `((header-line lsp-ui-doc-header)))
    (setq-local window-min-height 1)
    ;; (variable-pitch-mode 1)
    (setq header-line-format (when lsp-ui-doc-header (concat " " symbol))
            mode-line-format nil
            cursor-type nil))))
#+END_SRC
* Magithub filter
:PROPERTIES:
:ID:       8773D925-D5A0-47B5-9CEC-7A611D338014
:END:
#+BEGIN_SRC emacs-lisp
(require 'parse-time)
(defmacro magithub--time-number-of-days-since-string (iso8601)
`(time-to-number-of-days
    (time-since
    (parse-iso8601-time-string
    (concat ,iso8601 "+00:00")))))

(defun issue-filter-to-days (days type)
`(lambda (issue)
    (let ((created_at (magithub--time-number-of-days-since-string
                        (alist-get 'created_at issue)))
            (updated_at (magithub--time-number-of-days-since-string
                        (alist-get 'updated_at issue))))
        (or (< created_at ,days) (< updated_at ,days)))))

(defun magithub-filter-maybe (&optional limit)
"Add filters to magithub only if number of issues is greter than LIMIT."
(let ((max-issues (length (ignore-errors (magithub-issues))))
        (max-pull-requests (length (ignore-errors (magithub-pull-requests))))
        (limit (or limit 1)))
    (when (> max-issues limit)
    (add-to-list (make-local-variable 'magithub-issue-issue-filter-functions)
                    (issue-filter-to-days limit "issues")))
    (when (> max-pull-requests limit)
    (add-to-list (make-local-variable 'magithub-issue-pull-request-filter-functions)
                    (issue-filter-to-days limit "pull-requests")))))

(add-to-list 'magit-status-mode-hook #'magithub-filter-maybe)
#+END_SRC
* Evil-escape
:PROPERTIES:
:ID:       D180DEC3-D977-4362-8F78-216503E7D101
:END:
- Make it can escape from minibuffer
#+BEGIN_SRC elisp
(def-package-hook! evil-escape
:pre-config
(defun evil-escape-p ()
"Return non-nil if evil-escape can run."
(and evil-escape-key-sequence
        (not evil-escape-inhibit)
        (or (window-minibuffer-p)
            (bound-and-true-p isearch-mode)
            (memq major-mode '(ibuffer-mode
                            image-mode))
            (evil-escape--is-magit-buffer)
            (+popup-windows)
            (and (fboundp 'helm-alive-p) (helm-alive-p))
            (or (not (eq 'normal evil-state))
                (not (eq 'evil-force-normal-state
                        (lookup-key evil-normal-state-map [escape])))))
        (not (memq major-mode evil-escape-excluded-major-modes))
        (not (memq evil-state evil-escape-excluded-states))
        (or (not evil-escape-enable-only-for-major-modes)
            (memq major-mode evil-escape-enable-only-for-major-modes))
        (or (equal (this-command-keys) (evil-escape--first-key))
            (and evil-escape-unordered-key-sequence
                (equal (this-command-keys) (evil-escape--second-key))))
        (not (cl-reduce (lambda (x y) (or x y))
                        (mapcar 'funcall evil-escape-inhibit-functions)
                        :initial-value nil))))
(defun evil-escape--escape-normal-state ()
"Return the function to escape from normal state."
(cond
    ((and (fboundp 'helm-alive-p) (helm-alive-p)) 'helm-keyboard-quit)
    ((eq 'ibuffer-mode major-mode) 'ibuffer-quit)
    ((eq 'image-mode major-mode) 'quit-window)
    ((evil-escape--is-magit-buffer) 'evil-escape--escape-with-q)
    ((bound-and-true-p isearch-mode) 'isearch-abort)
    ((window-minibuffer-p) (kbd "C-g"))
    (t (lookup-key evil-normal-state-map [escape]))))
(setq-default evil-escape-delay 0.1
            evil-escape-excluded-states nil)
(map! :irvo "C-g" #'evil-escape)
nil)
#+END_SRC
* ssh-deploy
:PROPERTIES:
:ID:       43C20488-EB51-4500-B7BE-FF2D9B82BC2B
:END:
- used to emit errors
#+BEGIN_SRC elisp
(def-package-hook! ssh-deploy
:pre-init
(def-package! ediff-diff
:commands (ediff-same-file-contents))
t)
#+END_SRC
* fringe and contiuation symbol
:PROPERTIES:
:ID:       031F8C2B-CD34-4579-A48C-8BCD26EF1F96
:END:
- used to be this
#+BEGIN_SRC elisp
(or standard-display-table
(setq standard-display-table (make-display-table)))
(set-display-table-slot standard-display-table 0 ?\ )
(setq fringe-indicator-alist (delq
                            (assq 'truncation fringe-indicator-alist)
                            (delq (assq 'continuation fringe-indicator-alist)
                                fringe-indicator-alist)))
#+END_SRC
- Now use this:
#+BEGIN_SRC elisp
(map-delete fringe-indicator-alist 'truncation)
#+END_SRC
* Org babel hack 
:PROPERTIES:
:ID:       4B48B3C2-293A-4B26-97BD-80A5ABAC1E1F
:END:
#+BEGIN_SRC elisp
(defun +org-private|org-edit-src-code (&optional code edit-buffer-name)
"Edit the source or example block at point.
\\<org-src-mode-map>
The code is copied to a separate buffer and the appropriate mode
is turned on.  When done, exit with `\\[org-edit-src-exit]'.  This \
will remove the
original code in the Org buffer, and replace it with the edited
version.  See `org-src-window-setup' to configure the display of
windows containing the Org buffer and the code buffer.

When optional argument CODE is a string, edit it in a dedicated
buffer instead.

When optional argument EDIT-BUFFER-NAME is non-nil, use it as the
name of the sub-editing buffer."
(interactive)
(let* ((element (org-element-at-point))
        (type (org-element-type element)))
(unless (and (memq type '(example-block src-block))
                (org-src--on-datum-p element))
    (user-error "Not in a source or example block"))
(let* ((lang
        (if (eq type 'src-block) (org-element-property :language element)
            "example"))
        (lang-f (and (eq type 'src-block) (org-src--get-lang-mode lang)))
        (babel-info (and (eq type 'src-block)
                        (org-babel-get-src-block-info 'light)))
        deactivate-mark)
    (when (and (eq type 'src-block) (not (functionp lang-f)))
    (error "No such language mode: %s" lang-f))
    (org-src--edit-element
    element
    (or edit-buffer-name
        (org-src--construct-edit-buffer-name (buffer-name) lang))
    lang-f
    (and (null code)
        (lambda () (org-escape-code-in-region (point-min) (point-max))))
    (and code (org-unescape-code-in-string code)))
    ;; Finalize buffer.
    (setq-local org-coderef-label-format
                (or (org-element-property :label-fmt element)
                    org-coderef-label-format))
    (when (eq type 'src-block)
    (let* ((org-src--babel-info babel-info)
            (params (nth 2 babel-info))
            (dir (cdr (assq :dir params))))
        (if (bound-and-true-p dir)
            (cd (file-name-as-directory (expand-file-name dir)))))
    (let ((edit-prep-func (intern (concat "org-babel-edit-prep:" lang))))
        (when (fboundp edit-prep-func)
        (funcall edit-prep-func babel-info))))
    t)))
(advice-add #'org-edit-src-code :override #'+org-private|org-edit-src-code)
#+END_SRC
* org-wild-notifier
:PROPERTIES:
:ID:       C8C6E74C-5936-4C00-AF8F-4F68BBDD77F1
:END:
Pretty buggy beast...
#+begin_src emacs-lisp :tangle yes
(def-package! org-wild-notifier
:commands (org-wild-notifier-mode
            org-wild-notifier-check)
:config
(setq org-wild-notifier-keyword-whitelist '("TODO" "HABT")))
(defun start-org-wild-notifier ()
(if (bound-and-true-p org-wild-notifier-mode)
    (message "You already have notifier with you!")
(run-with-timer 60 nil 'org-wild-notifier-mode 1)
(message "Org wild notifier, naughty naughty fire!")))
(start-org-wild-notifier)
#+end_src

* Set transparency
#+BEGIN_SRC elisp
(defun +xfu/set--transparency (inc)
"Increase or decrease the selected frame transparency"
(let* ((alpha (frame-parameter (selected-frame) 'alpha))
        (next-alpha (cond ((not alpha) 100)
                        ((> (- alpha inc) 100) 100)
                        ((< (- alpha inc) 0) 0)
                        (t (- alpha inc)))))
(set-frame-parameter (selected-frame) 'alpha next-alpha)))

(defhydra +xfu/set-transparency (:columns 2)
"
ALPHA : [ %(frame-parameter nil 'alpha) ]
"
("j" (lambda () (interactive) (+xfu/set--transparency 1)) "+ more")
("k" (lambda () (interactive) (+xfu/set--transparency -1)) "- less")
("J" (lambda () (interactive) (+xfu/set--transparency 10)) "++ more")
("K" (lambda () (interactive) (+xfu/set--transparency -10)) "-- less")
("=" (lambda (value) (interactive "nTransparency Value 0 - 100 opaque:")
        (set-frame-parameter (selected-frame) 'alpha value)) "Set to ?" :color blue))
#+END_SRC
Well I didn't actually used that...

* Magit Popup
I used to use those popup rule, but now I simply use @hlissner 's config.
#+BEGIN_SRC elisp
(setq magit-bury-buffer-function #'+magit/quit
    magit-popup-display-buffer-action nil
    magit-display-file-buffer-function 'switch-to-buffer-other-window)

(map! :map magit-mode-map
    [remap quit-window] #'+magit/quit
    :n "\\" nil)
(set! :popup "^\\(?: ?\\*\\)?magit.*: "
'((slot . -1) (side . right) (size . 80))
'((select . t) (quit . nil)))

(set! :popup "^\\*magithub-dash\\*"
'((slot . -3) (side . right) (window-height . 20))
'((select . t)))
(def-modeline-segment! magithub-buffer-info-simple
"striped magithub buffer name"
(substring (buffer-name) 11 -1))
(def-modeline-segment! magit-title
"striped magithub buffer name"
(let* ((str "M A G I T")
        (num (max 0 (/ (- (window-width
                        (selected-window)) (string-width str)) 2))))
(concat +doom-modeline--bar-inactive (propertize (concat (make-string num ? ) str) 'face 'bold))))

(def-modeline-segment! magithub-title
"striped magithub buffer name"
(let* ((str "D A S H B O A R D")
        (num (max 0 (/ (- (window-width
                        (selected-window)) (string-width str)) 2))))
(concat +doom-modeline--bar-inactive (propertize (concat (make-string num ? ) str) 'face 'bold))))

(def-modeline! magit-title
(magit-title))

(def-modeline! magithub-title
(magithub-title))

(def-modeline! magithub
(bar matches " " magithub-buffer-info-simple))
(set! :popup "^\\*magithub: .*\\*"
'((slot . -2) (side . right) (window-height . 0.6))
'((select . t)))

(defun +magithub|switch-mode-and-header-line ()
(setq header-line-format (or (doom-modeline 'magithub) mode-line-format)
    mode-line-format nil))
(add-hook 'magithub-issue-view-mode-hook #'+magithub|switch-mode-and-header-line)

(defun +magit|switch-mode-and-header-line ()
(setq header-line-format (or (doom-modeline 'magit-title) mode-line-format)
    mode-line-format nil))
(add-hook 'magit-status-mode-hook #'+magit|switch-mode-and-header-line)

(defun +magithub-dash|switch-mode-and-header-line ()
(setq header-line-format (or (doom-modeline 'magithub-title) mode-line-format)
    mode-line-format nil))
(add-hook 'magithub-dash-mode-hook #'+magithub-dash|switch-mode-and-header-line)

(set! :popup "^\\*magit.*popup\\*"
'((slot . 0) (side . right))
'((select . t)))
(set! :popup "^\\(?: ?\\*\\)?magit-revision:.*"
'((slot . 2) (side . right) (window-height . 0.6))
'((select . t)))
(set! :popup "^\\(?: ?\\*\\)?magit-diff:.*"
'((slot . 2) (side . right) (window-height . 0.6))
'((select . nil)))
#+END_SRC

* Pretty magit
#+BEGIN_SRC elisp
(def-package! pretty-magit
:load-path "~/.doom.d/local/"
:commands (pretty-magit))
(pretty-magit "Feature" ? '(:foreground "slate gray" :height 1.0 :family "FontAwesome"))
(pretty-magit "Add" ? '(:foreground "#375E97" :height 1.0 :family "FontAwesome"))
(pretty-magit "Fix" ? '(:foreground "#FB6542" :height 1.0 :family "FontAwesome"))
(pretty-magit "Clean" ? '(:foreground "#FFBB00" :height 1.0 :family "FontAwesome"))
(pretty-magit "Docs" ? '(:foreground "#3F681C" :height 1.0 :family "FontAwesome"))
(pretty-magit "master" ? '(:box nil :height 1.0 :family "github-octicons") t)
(pretty-magit "origin" ? '(:box nil :height 1.0 :family "github-octicons") t)
#+END_SRC

* Pinentry
#+BEGIN_SRC elisp
(def-package! pinentry
:commands (pinentry-start))
(run-with-idle-timer
10
nil
(lambda!
(require 'pass)
(pinentry-start)))
#+END_SRC


* git commit when org-log
#+BEGIN_SRC elisp
(defvar *org-git-notes nil
  "use log notes for git commit notes")
(defun *org-store-log-note ()
  "Finish taking a log note, and insert it to where it belongs."
  (let ((txt (prog1 (buffer-string)
               (kill-buffer)))
        (note (cdr (assq org-log-note-purpose org-log-note-headings)))
        lines)
    (while (string-match "\\`# .*\n[ \t\n]*" txt)
      (setq txt (replace-match "" t t txt)))
    (when (string-match "\\s-+\\'" txt)
      (setq txt (replace-match "" t t txt)))
    (setq lines (and (not (equal "" txt)) (org-split-string txt "\n")))
    (when (org-string-nw-p note)
      (setq note
            (org-replace-escapes
             note
             (list (cons "%u" (user-login-name))
                   (cons "%U" user-full-name)
                   (cons "%t" (format-time-string
                               (org-time-stamp-format 'long 'inactive)
                               org-log-note-effective-time))
                   (cons "%T" (format-time-string
                               (org-time-stamp-format 'long nil)
                               org-log-note-effective-time))
                   (cons "%d" (format-time-string
                               (org-time-stamp-format nil 'inactive)
                               org-log-note-effective-time))
                   (cons "%D" (format-time-string
                               (org-time-stamp-format nil nil)
                               org-log-note-effective-time))
                   (cons "%s" (cond
                               ((not org-log-note-state) "")
                               ((string-match-p org-ts-regexp
                                                org-log-note-state)
                                (format "\"[%s]\""
                                        (substring org-log-note-state 1 -1)))
                               (t (format "\"%s\"" org-log-note-state))))
                   (cons "%S"
                         (cond
                          ((not org-log-note-previous-state) "")
                          ((string-match-p org-ts-regexp
                                           org-log-note-previous-state)
                           (format "\"[%s]\""
                                   (substring
                                    org-log-note-previous-state 1 -1)))
                          (t (format "\"%s\""
                                     org-log-note-previous-state)))))))
      (when lines (setq note (concat note " \\\\")))
      (push note lines))
    (when (and lines (not org-note-abort))
      (setq *org-git-notes (concat *org-git-notes ": " (substring-no-properties (car lines))))
      (with-current-buffer (marker-buffer org-log-note-marker)
        (org-with-wide-buffer
         ;; Find location for the new note.
         (goto-char org-log-note-marker)
         (set-marker org-log-note-marker nil)
         ;; Note associated to a clock is to be located right after
         ;; the clock.  Do not move point.
         (unless (eq org-log-note-purpose 'clock-out)
           (goto-char (org-log-beginning t)))
         ;; Make sure point is at the beginning of an empty line.
         (cond ((not (bolp)) (let ((inhibit-read-only t)) (insert "\n")))
               ((looking-at "[ \t]*\\S-") (save-excursion (insert "\n"))))
         ;; In an existing list, add a new item at the top level.
         ;; Otherwise, indent line like a regular one.
         (let ((itemp (org-in-item-p)))
           (if itemp
               (indent-line-to
                (let ((struct (save-excursion
                                (goto-char itemp) (org-list-struct))))
                  (org-list-get-ind (org-list-get-top-point struct) struct)))
             (org-indent-line)))
         (insert (org-list-bullet-string "-") (pop lines))
         (let ((ind (org-list-item-body-column (line-beginning-position))))
           (dolist (line lines)
             (insert "\n")
             (indent-line-to ind)
             (insert line)))
         (message "Note stored")
         (org-back-to-heading t)
         (org-cycle-hide-drawers 'children))
        ;; Fix `buffer-undo-list' when `org-store-log-note' is called
        ;; from within `org-add-log-note' because `buffer-undo-list'
        ;; is then modified outside of `org-with-remote-undo'.
        (when (eq this-command 'org-agenda-todo)
          (setcdr buffer-undo-list (cddr buffer-undo-list)))
        (let ((file (buffer-file-name)))
          (require 'magit)
          (magit-call-git "add" file)
          (magit-call-git "commit" "-m" (concat file ": " *org-git-notes))
          (magit-refresh)))))
  ;; Don't add undo information when called from `org-agenda-todo'.
  (let ((buffer-undo-list (eq this-command 'org-agenda-todo)))
    (set-window-configuration org-log-note-window-configuration)
    (with-current-buffer (marker-buffer org-log-note-return-to)
      (goto-char org-log-note-return-to))
    (move-marker org-log-note-return-to nil)
    (when org-log-post-message (message "%s" org-log-post-message))))
(advice-add 'org-store-log-note :override #'*org-store-log-note)
#+END_SRC
